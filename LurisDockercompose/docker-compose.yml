version: '3'

services:
  db:
    image: postgres
    environment:
      POSTGRES_USER:
        lurisdatabasehomework
      POSTGRES_PASSWORD:
        P@ssword
    volumes:
      - ../20240216.05.07.07:/docker-entrypoint-initdb.d/filegeneratedinthevolume.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_redy"]
      interval: 40s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      otel:
  
  server:
    build: ..
    ports:
      - 2607:8080
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "db=server=db;user id=lurisdatabasehomework;database=postgres;password=P@ssword;"
    healthcheck:
      test: curl --fail http://localhost:2607/healthCheck || exit 1
      interval: 3s
      retries: 2
      start_period: 5s
      timeout: 15s
    networks:
      - otel
  

  black-box:
  # https://github.com/prometheus/blackbox_exporter/releases
    image: prom/blackbox-exporter:v0.23.0
    container_name: blackbox
    restart: unless-stopped
    ports: 
    - "2608:9115"
    volumes:
        - ../blackbox/blackbox.yml:/etc/blackbox/blackbox.yml
    command: --config.file=/etc/blackbox/blackbox.yml
    depends_on:
      - server
    networks:
      otel:

  prometheus:
    # https://github.com/prometheus/prometheus/releases
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    ports:
     - "2609:9090"
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - black-box
    networks:
      otel:

  grafana:
    # https://github.com/grafana/grafana/releases
    image: grafana/grafana:9.4.7
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      #- #grafana-data:/var/lib/grafana
      - ../grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    user: root
    ports:
      - "2610:3000"
    depends_on:
      - prometheus
    networks:
      otel:

  otel-collector:
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/releases
    container_name: otel
    hostname: my-otel-collector
    image: otel/opentelemetry-collector-contrib:0.75.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ../otel/otel.yml:/etc/otel-collector-config.yaml

    ports:
      - 8888:8888 #prometheus metrics
      - 859:8859 #prometheus exporter metrics
      - 4317:4317 #OTLP gRPC receiver
      - 9200:55679 #zpages
      - 13133:13133 #Health Check
    networks:
      otel:

  loki:
    image: grafana/loki:2.8.0
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - 3100:3100
    networks:
      otel:

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - 9411:9411
    restart: always
    networks:
      otel:


networks:
  otel:

volumes:
  loki:
  prometheus:
  tempo:

    



